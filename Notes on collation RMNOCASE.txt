
NOTES ON COLATION SEQUENCE RMNOCASE

SQLite needs the ability to sort data. It does so by comparing two items and determining if they are equal, less or greater than by using a collation function.
A summary can be found at:
https://www.w3resource.com/sqlite/sqlite-collating-function-or-sequence.php

RMNOCASE is the name of a collation used by the RM schema for columns that represent names.  If you look at the data table design tab in SQLite expert, you'll see that the name columns in the NameTable and SourceTable are ordered by RMNOCASE. Many other names also use the same collation.

The collation is also used to create any indexes where it is specified.

RMNOCASE is designed to sort upper and lower case names together (not tested by me) like SQLite's builtin NOCASE collation.
NOCASE does this for the 26 letters of the latin alphabet, but not for accented characters found, for example, in European languages. RMNOCASE also sorts upper and lower case accented characters together.

RMNOCASE is not part of SQLite. It's a piece of sw created by RM Inc. as a SQLite extension. That software is proprietary and its specification has not be made public.
A dll that approximates the function of the RMNOCASE collation extension is on Tom's site, SQLiteToolsForRootsMagic.com. We'll call it the fake RMNOCASE.

The key point is the available dll and the proprietary code found inside RootsMagic do not function identically.
SQLite documentation states that while a database is operational, a collation may not change. If it does, it may lead to indeterminate results. BAD.


===========================================DIV50==
unifuzz64.dll download-

direct download:
https://sqlitetoolsforrootsmagic.com/wp-content/uploads/2018/05/unifuzz64.dll

the link above is found in this context-
https://sqlitetoolsforrootsmagic.com/rmnocase-faking-it-in-sqlite-expert-command-line-shell-et-al/

The SQLiteToolsforRootsMagic website has been around for many years and is run by a trusted RM user. Many posts to public RootsMagic user forums mention use of unifuzz64.dll from the SQLiteToolsforRootsMagic website.

 MD5 hash values are used to confirm the identity of files.
 MD5 hash							File size		File name
 06a1f485b0fae62caa80850a8c7fd7c2	256,406 bytes	unifuzz64.dll

===========================================DIV50==
Note that an empty database created on MacOS will fail integrity check when
done on a Windows OS machine.
Due to missing entries in the idxSourceTemplateName index.
Not clear what characters sort differently on Win and MacOS.

===========================================DIV50==


What to worry about

While operating on a database with RootsMagic alone, there is no problem. The authentic RMNOCASE collation is always used.

When working on a RootsMagic database externally, there can be issues if precautions are not take,

If names contain only the 26 latin characters, it would seem that there should not be a problem because the fake and authentic RMNOCASE should produce the same results. NOT TESTED


Indexes contain data that can be easily reconstructed by the SQLite command "reindex"
However, if a database is opened and it already has an index created with, say the authentic RMNOCASE and one operates on the date using the fake RMNOCASE and an index using RMNOCASE collation is used, bad things may happen.


Two situations to consider

Operating on a database opened only in an external tool
Operating on a database opened in RootsMagic and an external tool simultaneously.

Every time you plan to add, remove, or modify data in a column sorted by RMNOCASE, you must run the command to reindex first.

reindex RMNOCASE

Then all of your modification will work fine. But then, when you open your file in RM, the very first thing to do is the RM Rebuild indexes tool. After that, you'll be ok
I always confirm by running check file integrity after the build index.

The above is critical to maintain your database integrity. Maybe one day we'll be able to reverse engineer RM's RMNOCASE so an exact 'copy' can be made.


As regards to what you can do with sql- it's anything you can code.
There are lots of examples on Tom's site and I've put my stuff on GitHub.


When opening RootsMagic after having had the database reindexed using a fake RMNOCASE-
One can open the file, switch to the File tab, select Tools and then Rebuild Indexes.

Is the database completely inert before running the Rebuild Indexes tool?
Perhaps meta data is saved to ConfigTable ?
Perhaps Web Hints will be searched for ?

Are those problems- or ignorable with regard to the RMNOCASE issue?



Reference
How to handle collation version changes
https://sqlite.org/forum/info/5317344555f7a5f2


https://shallowdepth.online/posts/2022/01/5-ways-to-implement-case-insensitive-search-in-sqlite-with-full-unicode-support/

https://www.sqlite.org/src/artifact?ci=trunk&filename=ext/icu/README.txt

https://stackoverflow.com/questions/15051018/localized-collate-on-a-sqlite-string-comparison

https://stackoverflow.com/questions/181037/case-insensitive-utf-8-string-collation-for-sqlite-c-c

https://sourceforge.net/projects/icu/files/ICU4C/58.2/

https://icu.unicode.org/
https://www.npcglib.org/~stathis/blog/precompiled-icu/
https://www.sqlite.org/src/artifact?ci=trunk&filename=ext/icu/README.txt

https://github.com/nalgeon/sqlean


===========================================DIV50==
Where is RMNOCASE used in v9 schema

SELECT
  name,
  tbl_name,
  sql
FROM sqlite_master
WHERE SQL like  '%RMNOCASE%'


name	tbl_name	sql
AddressTable	AddressTable	CREATE TABLE AddressTable (AddressID INTEGER PRIMARY KEY, AddressType INTEGER, Name TEXT COLLATE RMNOCASE, Street1 TEXT, Street2 TEXT, City TEXT, State TEXT, Zip TEXT, Country TEXT, Phone1 TEXT, Phone2 TEXT, Fax TEXT, Email TEXT, URL TEXT, Latitude INTEGER, Longitude INTEGER, Note TEXT, UTCModDate FLOAT )

FactTypeTable	FactTypeTable	CREATE TABLE FactTypeTable (FactTypeID INTEGER PRIMARY KEY, OwnerType INTEGER, Name TEXT COLLATE RMNOCASE, Abbrev TEXT, GedcomTag TEXT, UseValue INTEGER, UseDate INTEGER, UsePlace INTEGER, Sentence TEXT, Flags INTEGER, UTCModDate FLOAT )

MultimediaTable	MultimediaTable	CREATE TABLE MultimediaTable (MediaID INTEGER PRIMARY KEY, MediaType INTEGER, MediaPath TEXT, MediaFile TEXT COLLATE RMNOCASE, URL TEXT, Thumbnail BLOB, Caption TEXT COLLATE RMNOCASE, RefNumber TEXT COLLATE RMNOCASE, Date TEXT, SortDate BIGINT, Description TEXT, UTCModDate FLOAT )

NameTable	NameTable	CREATE TABLE NameTable (NameID INTEGER PRIMARY KEY, OwnerID INTEGER, Surname TEXT COLLATE RMNOCASE, Given TEXT COLLATE RMNOCASE, Prefix TEXT COLLATE RMNOCASE, Suffix TEXT COLLATE RMNOCASE, Nickname TEXT COLLATE RMNOCASE, NameType INTEGER, Date TEXT, SortDate BIGINT, IsPrimary INTEGER, IsPrivate INTEGER, Proof INTEGER, Sentence TEXT, Note TEXT, BirthYear INTEGER, DeathYear INTEGER, Display INTEGER, Language TEXT, UTCModDate FLOAT, SurnameMP TEXT, GivenMP TEXT, NicknameMP TEXT )

PlaceTable	PlaceTable	CREATE TABLE PlaceTable (PlaceID INTEGER PRIMARY KEY, PlaceType INTEGER, Name TEXT COLLATE RMNOCASE, Abbrev TEXT, Normalized TEXT, Latitude INTEGER, Longitude INTEGER, LatLongExact INTEGER, MasterID INTEGER, Note TEXT, Reverse TEXT COLLATE RMNOCASE, fsID INTEGER, anID INTEGER, UTCModDate FLOAT )

RoleTable	RoleTable	CREATE TABLE RoleTable (RoleID INTEGER PRIMARY KEY, RoleName TEXT COLLATE RMNOCASE, EventType INTEGER, RoleType INTEGER, Sentence TEXT, UTCModDate FLOAT )

SourceTable	SourceTable	CREATE TABLE SourceTable (SourceID INTEGER PRIMARY KEY, Name TEXT COLLATE RMNOCASE, RefNumber TEXT, ActualText TEXT, Comments TEXT, IsPrivate INTEGER, TemplateID INTEGER, Fields BLOB, UTCModDate FLOAT )

SourceTemplateTable	SourceTemplateTable	CREATE TABLE SourceTemplateTable (TemplateID INTEGER PRIMARY KEY, Name TEXT COLLATE RMNOCASE, Description TEXT, Favorite INTEGER, Category TEXT, Footnote TEXT, ShortFootnote TEXT, Bibliography TEXT, FieldDefs BLOB, UTCModDate FLOAT )

TagTable	TagTable	CREATE TABLE TagTable (TagID INTEGER PRIMARY KEY, TagType INTEGER, TagValue INTEGER, TagName TEXT COLLATE RMNOCASE, Description TEXT, UTCModDate FLOAT )

TaskTable	TaskTable	CREATE TABLE TaskTable (TaskID INTEGER PRIMARY KEY, TaskType INTEGER, RefNumber TEXT, Name TEXT COLLATE RMNOCASE, Status INTEGER, Priority INTEGER, Date1 TEXT, Date2 TEXT, Date3 TEXT, SortDate1 BIGINT, SortDate2 BIGINT, SortDate3 BITINT, Filename TEXT, Details TEXT, Results TEXT, UTCModDate FLOAT, Exclude INTEGER )

WitnessTable	WitnessTable	CREATE TABLE WitnessTable (WitnessID INTEGER PRIMARY KEY, EventID INTEGER, PersonID INTEGER, WitnessOrder INTEGER, Role INTEGER, Sentence TEXT, Note TEXT, Given TEXT COLLATE RMNOCASE, Surname TEXT COLLATE RMNOCASE, Prefix TEXT COLLATE RMNOCASE, Suffix TEXT COLLATE RMNOCASE, UTCModDate FLOAT )

FANTypeTable	FANTypeTable	CREATE TABLE FANTypeTable (FANTypeID INTEGER PRIMARY KEY, Name TEXT COLLATE RMNOCASE, Role1 TEXT, Role2 TEXT, Sentence1 TEXT, Sentence2 TEXT, UTCModDate FLOAT )

CitationTable	CitationTable	CREATE TABLE CitationTable (CitationID INTEGER PRIMARY KEY, SourceID INTEGER, Comments TEXT, ActualText TEXT, RefNumber TEXT, Footnote TEXT, ShortFootnote TEXT, Bibliography TEXT, Fields BLOB, UTCModDate FLOAT, CitationName TEXT COLLATE RMNOCASE )



idxSourceName	SourceTable	CREATE INDEX idxSourceName ON SourceTable (Name COLLATE RMNOCASE)


===========================================DIV50==
AddressTable
Name TEXT COLLATE RMNOCASE

FactTypeTable
Name TEXT COLLATE RMNOCASE

MultimediaTable
MediaFile TEXT COLLATE RMNOCASE
Caption TEXT COLLATE RMNOCASE
RefNumber TEXT COLLATE RMNOCASE

NameTable
Surname TEXT COLLATE RMNOCASE
Given TEXT COLLATE RMNOCASE
Prefix TEXT COLLATE RMNOCASE
Suffix TEXT COLLATE RMNOCASE
Nickname TEXT COLLATE RMNOCASE

PlaceTable
Name TEXT COLLATE RMNOCASE
Reverse TEXT COLLATE RMNOCASE

RoleTable
RoleName TEXT COLLATE RMNOCASE

SourceTable
Name TEXT COLLATE RMNOCASE

SourceTemplateTable
Name TEXT COLLATE RMNOCASE

TagTable
TagName TEXT COLLATE RMNOCASE

TaskTable
Name TEXT COLLATE RMNOCASE

WitnessTable
Given TEXT COLLATE RMNOCASE
Surname TEXT COLLATE RMNOCASE
Prefix TEXT COLLATE RMNOCASE
Suffix TEXT COLLATE RMNOCASE

FANTypeTable
Name TEXT COLLATE RMNOCASE

CitationTable
CitationName TEXT COLLATE RMNOCASE

idxSourceName
SourceTable
Name COLLATE RMNOCASE


13 tables and 1 index on name in SourceTable
The index use of RMNOCASE can be ignored since the table already specifies RMNOCASE as the default collation for SourceTable.Name


===========================================DIV50==


