=========================================================================DIV80==
Color code people by group membership
ColorFromGroup.py
INCLUDE: LIB_INTRO
=========================================================================DIV80==
Purpose

This utility will change the color coding/color high-lighting of people in
the database based on their group membership.
While this is easily done with RM, this utility allows a series of commands
to be executed with one run.
It is a perfect complement to the utility GroupFromSQL.


=========================================================================DIV80==
INCLUDE: LIB_Backups small changes
=========================================================================DIV80==
INCLUDE: LIB_Compatibility
=========================================================================DIV80==
INCLUDE: LIB_Overview
=========================================================================DIV80==
Running the utility in detail

==========-
Install Python for Windows x64  -see "APPENDIX  Python install" below.

==========-
Create a folder on your computer that you will not confuse with other
folders. It will be referred to as the "working folder".

==========-
Copy these items from the downloaded zip file to the working folder-
      ColorFromGroup.py                (file)
      RM-Python-config.ini             (file)
      RMpy                             (folder)

==========-
Make a copy of your database, move the copy into the working folder.

Rename the database copy to "TEST.rmtree" in order to prevent any
confusion about the purpose of the copy.

==========-
Edit the RM-Python-config.ini file in the working folder.
(See the section "APPENDIX  Config file: location, contents and editing" if you need help)

Check that the DB_PATH key in the config file is pointing to the
desired database.
If the above steps were followed, the path in the sample config file
is already correct, i.e. TEST.rmtree

Save the config file but leave it open in Notepad.

==========-
Before running the utility, you will want to confirm that a group exists
in your database that will be the basis of the color operation.
Make sure that you know the exact spelling of the name and that there
is only one group with that name.

==========-
Next, determine the color group that you wish to modify and the specific
color number. To get the numbers, open the color coding window in RM.
Looking at the "Current color code set" drop down menu at the top of the window,
the top-most item is set 1, the bottom is set 10. By default they are named
"Color code set 1"  etc.. If they have been renamed, count down the groups
to get the set's number. Looking at the left hand column of colors,
counting from the top color, Pink is 1, Slate is 27.

Next, determine what actions you wish to perform.
Usually, if you want to make a group correspond to a color, you will want to
reset/clear that color before assigning group members. This will take care of 
cases in which people have been removed from groups.
So for every group that you want to color, you will want to do a clear and then
a color operation on that group.

==========-
Edit the sample RM-Python-config.ini file in the working folder.
(See the section "APPENDIX  Config file: location, contents and editing"
if you need help)

A summary of the config file structure:
The names in square brackets are section names.
The items in a section are key-value pairs.

For example, in the sample config file, there is a section named 
[FILE_PATHS].
In that section, reside 3 key-value pairs, one of which is 
DB_PATH = TEST.rmtree

"DB_PATH" is the key, "TEST.rmtree" is the value.
key-value pairs are separated with a = character.


The utility needs to know where the RM database file is located, the output
report file name and its location.

If you followed the above instructions, no changes to any of the key-values in
the [FILE_PATHS] section are needed.

Save the config file but leave it open in Notepad.

==========-
Next, tell the utility what color operations to perform.
This requires a bit of explanation.
Each operation is contained in a separate section of the config file.
In a color operation section, reside 4 key=value pairs. These 4 items
define a color code operation.

ACTION can be one of: set, clearAny, clearOnlyIf, or setOnlyIf.
COLOR_CODE_SET takes a value of 1 to 10
COLOR takes a value of 1 to 27
GROUP takes a name of a group or "_ALL" which indicates all people in
      the database. The "_ALL" option is only usable
      with the clearAny and ClearOnlyIf actions.

Taken together, these 4 parameters give all of the necessary information 
for a color operation.

The distinctions between set vs setOnlyIf  and clearAny vs. ClearOnlyIf is
a bit subtle.

set vs setOnlyIf
The set action will always color code the people under consideration (either 
a group or all) no matter what color they are currently coded as.
The setOnlyIf action has an extra criterion, for the people under consideration
(either a group or all), only those people who currently have no color code
will be color coded with the specified COLOR.

clearAny vs. ClearOnlyIf
ClearAny is simplest. For the people under consideration (either a group or all)
the person's color code is cleared (set to 0).
ClearOnlyIf has an extra criterion, for the people under consideration (either
a group or all), only those people who are currently color coded by the color
indicated by the COLOR parameter, have their color code cleared (set to 0).
Note that the COLOR value is ignored for the clearAny operation.


As mentioned above, each set of color operation parameters is in its own 
section. The section name is completely arbitrary, but you may want to use 
a name that is similar to the group and add a character at the end to 
indicate Set or Clear. See the sample config file.

You can create as many of these sections as you wish. Each of these sections
will have all four color operation parameters (key-value pairs).

The last item to cover is the OPTIONS section.
It contains one key named: COLOR_COMMAND. It's value can be a single name, 
or it can be a multi-line value containing multiple names.

The key's value correspond to the section names you created earlier to
contain the 4 color parameters.
The section names listed in the COLOR_COMMAND are the color operations that 
will actually be performed by a run of the utility.

The color operations in a utility run are performed in the order that
they are listed in the COLOR_COMMAND's value.

Example:

#-----------------------------------------------
[OPTIONS]
COLOR_COMMAND =
  Color_my_family_C
  Color_my_family_S

[Color_my_family_C]
ACTION = clear
COLOR_CODE_SET = 5
COLOR = 1
GROUP = _ALL

[Color_my_family_S]
ACTION = set
COLOR_CODE_SET = 5
COLOR = 1
GROUP = FamGroup
#-----------------------------------------------

In this example, there are 3 sections: OPTIONS, Color_my_family_C, 
and Color_my_family_S.

The COLOR_COMMAND key in OPTIONS lists the sections that contain actions 
to execute.

When COLOR_COMMAND needs to specify more than one section name, it is entered
as a multi-line value. There are 3 rules for multi-line values:
1 each section name is on a separate line
2 each line, after the first, must be indented with at least one space.
3 the value can not contain an empty line.


The key can contain one section name, like
COLOR_COMMAND =   Color_my_family_C

or multiple section names, like-
COLOR_COMMAND = Color_my_family_C
  Color_my_family_S

or

COLOR_COMMAND =
  Color_my_family_C
  Color_my_family_S


Your config file can contain multiple color action sections, but only those
listed in COLOR_COMMAND will be executed. The others are ignored. 

You may want to keep unused sections in the config file for future use. 

The keys in the color command section are ACTION, COLOR_CODE_SET, COLOR, and GROUP.
ACTION is either set or clear
COLOR_CODE_SET is a number from 1 to 10.
COLOR is the color to use 1-27
GROUP is the RM group name that specifies which people are to have their code
code set.
If the ACTION is clear, then the GROUP should be set to "_ALL".
If ACTION is set, then GROUP must be the name of an existing RM group.

ACTION clear only clears a particular color in a particular color code set.
It does this for all people (thus the group name placeholder "_ALL")

The utility does not allow clearing all colors in a color code set or
clearing colors in multiple color code sets.

==========-
After confirming that your edits to the config file are saved,

Double click the "ColorFromGroup.py" file in the working folder to run
the utility.

=========-
A terminal window is displayed while the utility processes
the commands.

=========-
The terminal terminal window closes and the report file is displayed
in Notepad for you inspection.

=========-
Open the TEST.rmtree database in RM and confirm the desired changes have
been accomplished.

=========-
Consider whether to rename TEST.rmtree and use it as your research database.


=========================================================================DIV80==
Notes

=========-
The GROUP key specifies which people in the database the color operation 
is to be performed on. It can be either the name of a RM person group or "_ALL".

_ALL will operate on all people in the database. It may only be used 
for clear color operations.

=========-
ACTION can be one of: set, clearAny, ClearOnlyIf, or setOnlyIf.

COLOR_CODE_SET takes a value of 1 to 10

COLOR takes a value of 1 to 27

GROUP takes a name of a group or "_ALL" which indicates all people in
      the database. The "_ALL" option is only usable
      with the clearAny and ClearOnlyIf actions.

Taken together, these 4 parameters give all of the necessary information 
for a color operation.

The distinctions between set vs setOnlyIf  and clearAny vs. ClearOnlyIf is
a bit subtle.

set vs setOnlyIf
The set action will always color code the people under consideration (either 
a group or all) no matter what color they are currently coded as.
The setOnlyIf action has an extra criterion, for the people under consideration
(either a group or all), only those people who currently have no color code
will be color coded with the specified COLOR.

clearAny vs. ClearOnlyIf
ClearAny is simplest. For the people under consideration (either a group or all)
the person's color code is cleared (set to 0).
ClearOnlyIf has an extra criterion, for the people under consideration (either
a group or all), only those people who are currently color coded by the color
indicated by the COLOR parameter, have their color code cleared (set to 0).
Note that the COLOR value is ignored for the clearAny operation.

The choice between each pair will depend on the exact circumstances: what other
color operations have been performed and the order in which they were done.
The same considerations apply when using the RM user interface to do color
coding.

RM's command "Clear Color for people selected above" does the 
equivalent of the clearAny option in this utility. No matter what color happens
to be selected, the color of the selected people is cleared.

The previous release of this software used the clearOnlyIf option.

=========-
Updating the colorization of a group while the database is open in RM
works OK. However, RM will not refresh the screen based on an external update.
So, switch screens and then return to see the updated color coding.

=========-
On some occasions, the utility report file will display a "Database
Locked" message. In that case, close RM and re-run the utility, then re-open
RM. It's not clear why this sometimes happens, but it is rare.
No database damage has ever been seem after many hundreds of uses.
"Database locked" is a normal operating message encountered from SQLite.

=========-
This utility only changes the database's PersonTable.

=========-
This utility will, if so configured, modify a pre-existing color coding
that may be important to you. Take care when assigning the actions in the
config file.

=========================================================================DIV80==
INCLUDE: LIB_APPENDIX  Config file: location, contents and editing
INCLUDE: LIB_APPENDIX  Config File: multi-line value
INCLUDE: LIB_APPENDIX  Config File: encoding
=========================================================================DIV80==
INCLUDE: LIB_APPENDIX  Python install
=========================================================================DIV80==
INCLUDE: LIB_APPENDIX  Troubleshooting


=========================================================================DIV80==
TODO

*  Consider adding abilities:
*  to specify color by name, color set by name.
*  to rename a color to the group that it represents
*  ?? what would you find useful?


=========================================================================DIV80==
INCLUDE: LIB_Feedback
=========================================================================DIV80==
INCLUDE: LIB_Distribution
=========================================================================DIV80==
