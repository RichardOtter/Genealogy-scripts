=========================================================================DIV80==
Group persons by using SQL
GroupFromSQL.py
INCLUDE: LIB_INTRO
=========================================================================DIV80==
Purpose

This utility uses SQL to query the database file and create a RM group in the
RM database independently of RM. Groups may be created with RootsMagic software,
of course, but the types of queries are much more limited.

This utility will update one or more RM groups from any SQL query that returns
a list of RINs/PersonIDs.


=========================================================================DIV80==
INCLUDE: LIB_Backups small changes
=========================================================================DIV80==
INCLUDE: LIB_Compatibility
=========================================================================DIV80==
INCLUDE: LIB_Overview
=========================================================================DIV80==
Running the utility in detail

==========-
Create a folder on your computer that you will not confuse with other
folders- the "working folder".

==========-
*  Copy these items from the downloaded zip file to the working folder-
      GroupFromSQL.py                  (file)
      RM-Python-config.ini             (file)
      RMpy                             (folder)

==========-
Make a copy of your database, move the copy into the working folder.

Rename the database copy to "TEST.rmtree" in order to prevent any
confusion about the purpose of the copy.

==========-
Edit the sample RM-Python-config.ini file in the working folder.
(See the section "APPENDIX  Config file: location, contents and editing"
if you need help)

A summary of the config file structure:
The names in square brackets are section names.
The items in a section are key-value pairs.

For example, in the sample config file, there is a section named 
[FILE_PATHS].
In that section, reside 3 key-value pairs, one of which is 
DB_PATH = TEST.rmtree

"DB_PATH" is the key, "TEST.rmtree" is the value.
key-value pairs are separated with a = character.


The utility needs to know where the RM database file is located, the output
report file name and its location.

If you followed the above instructions, no changes to any of the key-values in
the [FILE_PATHS] section are needed.


==========-
Create or find a SQL statement that returns the RINs of the people you want
to put into a group.
for example, the SQL that returns all of the people in a database is-

SELECT PersonID FROM PersonTable

Enter the SQL statement into the config file so the utility can use it.

[OPTIONS]
GROUP_NAME = GroupEveryone

#-----------------------------------------------
[GroupEveryone]
SQL_QUERY = SELECT PersonID FROM PersonTable

#-----------------------------------------------

Shown are two sections: "OPTIONS" and "GroupEveryone".

Section "OPTIONS" has one key :"GROUP_NAME" which has the value "GroupEveryone".

Section "GroupEveryone" has one key: "SQL_QUERY" which has the
value "SELECT PersonID FROM PersonTable".

This example, if run with the utility, will update the group GroupEveryone, already 
existing in the database, using the SQL statement show.
The example SQL_QUERY is very simple and fits on the same line as the key name.
Real SQL will be much more complex and require multiple lines.
Each line of a multi line Value must be indented at least one space.

for example:

SQL_QUERY =
   --
   -- selects person whose married name starts with 'sm'
   SELECT pt.personid
   FROM persontable AS pt
   INNER JOIN nametable AS nt ON pt.personid = nt.ownerid
   WHERE nt.nametype = 5    -- married name
   AND nt.surname LIKE 'sm%'

The SQL_QUERY key specifies the SQL statement that will be run.
It must return a set of PersonID's. The statement may begin on the next line,
as above, as long as the SQL lines are all indented with white space.
Blank lines are not allowed.
Use indented SQL comments (--) to add spacing for readability.

# style comments are not allowed in multi line values.


The GROUP_NAME value in OPTIONS may also have multiple lines, that is
multiple group names. Each of those group will be updated in the same run
of the utility and listed separately in the report.

Your config file can contain multiple sections each with SQL statements.
Only the sections specified by [OPTIONS] GROUP_NAME will be used. The others
are ignored.

=========-
Double click the "GroupFromSQL.py" file in the working folder
to start the utility.

=========-
A terminal window is displayed while the utility processes
the commands.

=========-
The report file is displayed in Notepad for you inspection.

=========-
Open the TEST.rmtree database in RM and confirm the desired changes have
been accomplished.

=========-
Consider whether to rename TEST.rmtree and use it as your research database.


=========================================================================DIV80==
Notes

=========-
This utility will not help you write the SQL statement and is not a good
working environment in which to create your SQL statement.
Confirm you query works before running it in this utility. (Or get the SQL from
a source that has confirmed its results. This app is written so that incorrect
SQL will not damage your database, only give groups with unwanted members.)
It is suggested that you write and debug your SQL in a GUI SQLite manager app,
such as "SQLite Expert Personal", the 64bit version, a free app. Several others
are also available.

Note that the SQL statement is run in an environment that does not have the
RMNOCASE collation used by RM for most name type columns. Use "COLLATE NOCASE"
to avoid errors.

=========-
Also remember, that groups in RM, are always groups of Persons. So if you want
to find all RM facts with a certain characteristic, you need to create a group of
the people that have that fact attached. Once the group is created, you will
need to search each person's edit window for the fact you are interested in.

=========-
Due to technical issue regarding RMNOCASE, this utility will not actually create a
new group. Instead use RM to create the group name before using this utility.
The process is simple-
Open the database in RM,
Click the Command palette icon in the top right corner of the RM window.
Type "Group" and select the "Groups" command.
In the Add New Group window, type the name of the new group and hit Save.
Be sure the name is unique among group names.
Leave the Type set to "Simple" as is the default.

The same Add New Group window can be accessed by clicking the large plus icon in
the groups tab in the "Side View" which by default is on the left.

=========-
Updating the contents of a group while the database is open in RM works OK.
However, RM lists using group (simple style) filters do not have a refresh button,
so, for example, if you displaying People view filtered by the group that has been
updated, you'll need to switch to another group and then back again to see the
effect of the group having been updated.

=========-
On some occasions, the utility report file will display a "Database
Locked" message. In that case, close RM and re-run the utility, then re-open 
RM. It's not clear why this sometimes happens, but it is rare. 
For some reason, RM keeps an open transaction which prevents other processes
from making updates.
No database damage has ever been seem after many hundreds of uses. 
"Database locked" is a normal message encountered from SQLite.

Less important notes.

=========-
All SQL statements have not tested :)
The utility takes the input SQL and creates a temporary view based on it. If that
fails, an appropriate error is returned. That should protect against SQL that
modifies/deletes data. (This is not tested beyond simple cases.)

=========-
This utility will, if so configured, modify a pre-existing group that may be
important to you. Take care when assigning the group name: [OPTIONS] GROUP_NAME.

=========-
This utility only changes the GroupsTable in the database

=========-
This utility creates a temporary view named: PersonIdList_RJO_utils and
deletes it when done.

=========-
(For testing) To create a "database locked" situation, start a transaction
in an external SQLite tool, try to run this utility. Will get locked message 
until transaction in SQLite Expert is either committed or RolledBack.

=========================================================================DIV80==
INCLUDE: LIB_APPENDIX  Config file: location, contents and editing
INCLUDE: LIB_APPENDIX  Config File: multi-line value
INCLUDE: LIB_APPENDIX  Config File: encoding
=========================================================================DIV80==
INCLUDE: LIB_APPENDIX  Python install
=========================================================================DIV80==
INCLUDE: LIB_APPENDIX  Troubleshooting
=========================================================================DIV80==
TODO

* COLOR:  Consider adding color coding functions.
*  ?? what would you find useful?


=========================================================================DIV80==
INCLUDE: LIB_Feedback
=========================================================================DIV80==
INCLUDE: LIB_Distribution
=========================================================================DIV80==
